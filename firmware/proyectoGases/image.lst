
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000608  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000014  00000608  00000608  0000065c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  0000061c  0000061c  00000670  2**2
                  ALLOC
  3 .debug_abbrev 00000203  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006ba  00000000  00000000  00000873  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004f5  00000000  00000000  00000f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000001c0  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001f7  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubtypes 0000006c  00000000  00000000  000017db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000040  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000247  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00001ace  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000015e  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 7c 	calli 2bc <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 20 	ori gp,gp,0x620
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 1c 	ori r1,r1,0x61c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 a0 	ori r3,r3,0x6a0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"


void main()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	// uint8_t divisor;
	uint8_t msb;
	uint8_t lsb;
	
	
	spi_init();
 210:	f8 00 00 e6 	calli 5a8 <spi_init>
	while (1) {

		
		spi_putchar(0xc0);
 214:	34 01 00 c0 	mvi r1,192
 218:	f8 00 00 ea 	calli 5c0 <spi_putchar>

		msleep(2000);
 21c:	34 01 07 d0 	mvi r1,2000
 220:	f8 00 00 57 	calli 37c <msleep>

		
	
		uart_putchar(0x01);
 224:	34 01 00 01 	mvi r1,1
 228:	f8 00 00 8a 	calli 450 <uart_putchar>
		uart_putchar(0x01);
 22c:	34 01 00 01 	mvi r1,1
 230:	f8 00 00 88 	calli 450 <uart_putchar>
 234:	e3 ff ff f8 	bi 214 <main+0xc>

00000238 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 238:	c3 a0 00 00 	ret

0000023c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 23c:	78 01 00 00 	mvhi r1,0x0
 240:	38 21 06 9c 	ori r1,r1,0x69c
 244:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 248:	78 02 00 00 	mvhi r2,0x0
 24c:	38 42 06 0c 	ori r2,r2,0x60c
 250:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 254:	34 63 00 01 	addi r3,r3,1
 258:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 25c:	34 01 00 0e 	mvi r1,14
 260:	58 41 00 00 	sw (r2+0),r1
}
 264:	c3 a0 00 00 	ret

00000268 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 268:	78 01 00 00 	mvhi r1,0x0
 26c:	38 21 06 08 	ori r1,r1,0x608
	   timer0->tcr0 = 0xAA;
 270:	78 02 00 00 	mvhi r2,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 274:	28 23 00 00 	lw r3,(r1+0)
	   timer0->tcr0 = 0xAA;
 278:	38 42 06 0c 	ori r2,r2,0x60c
	   spi0->rxtx=1;
 27c:	78 01 00 00 	mvhi r1,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 280:	28 44 00 00 	lw r4,(r2+0)
	   spi0->rxtx=1;
 284:	38 21 06 14 	ori r1,r1,0x614
 288:	28 21 00 00 	lw r1,(r1+0)

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 28c:	34 02 00 1e 	mvi r2,30
 290:	58 62 00 04 	sw (r3+4),r2
	   timer0->tcr0 = 0xAA;
 294:	34 05 00 aa 	mvi r5,170
 298:	58 85 00 00 	sw (r4+0),r5
	   spi0->rxtx=1;
 29c:	34 04 00 01 	mvi r4,1
 2a0:	58 24 00 00 	sw (r1+0),r4
	   spi0->cs=3;
 2a4:	34 04 00 03 	mvi r4,3
 2a8:	58 24 00 08 	sw (r1+8),r4
	   spi0->divisor=4;
 2ac:	34 04 00 04 	mvi r4,4
 2b0:	58 24 00 0c 	sw (r1+12),r4
	   uart0->rxtx=30;
 2b4:	58 62 00 04 	sw (r3+4),r2
           
	  
}	
 2b8:	c3 a0 00 00 	ret

000002bc <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2bc:	37 9c ff f0 	addi sp,sp,-16
 2c0:	5b 8b 00 10 	sw (sp+16),r11
 2c4:	5b 8c 00 0c 	sw (sp+12),r12
 2c8:	5b 8d 00 08 	sw (sp+8),r13
 2cc:	5b 9d 00 04 	sw (sp+4),ra
 2d0:	78 0b 00 00 	mvhi r11,0x0
 2d4:	39 6b 06 1c 	ori r11,r11,0x61c
 2d8:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2dc:	35 6d 00 80 	addi r13,r11,128
 2e0:	e0 00 00 04 	bi 2f0 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2e4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2e8:	45 6d 00 08 	be r11,r13,308 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 2ec:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2f0:	21 81 00 01 	andi r1,r12,0x1
 2f4:	44 20 ff fc 	be r1,r0,2e4 <irq_handler+0x28>
 2f8:	29 61 00 00 	lw r1,(r11+0)
 2fc:	35 6b 00 04 	addi r11,r11,4
 300:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 304:	5d 6d ff fa 	bne r11,r13,2ec <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 308:	2b 9d 00 04 	lw ra,(sp+4)
 30c:	2b 8b 00 10 	lw r11,(sp+16)
 310:	2b 8c 00 0c 	lw r12,(sp+12)
 314:	2b 8d 00 08 	lw r13,(sp+8)
 318:	37 9c 00 10 	addi sp,sp,16
 31c:	c3 a0 00 00 	ret

00000320 <isr_init>:

void isr_init()
{
 320:	78 01 00 00 	mvhi r1,0x0
 324:	78 02 00 00 	mvhi r2,0x0
 328:	38 21 06 1c 	ori r1,r1,0x61c
 32c:	38 42 02 38 	ori r2,r2,0x238
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 330:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 334:	58 22 00 00 	sw (r1+0),r2
 338:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 33c:	5c 23 ff fe 	bne r1,r3,334 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 340:	c3 a0 00 00 	ret

00000344 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 344:	78 03 00 00 	mvhi r3,0x0
 348:	3c 21 00 02 	sli r1,r1,2
 34c:	38 63 06 1c 	ori r3,r3,0x61c
 350:	b4 61 18 00 	add r3,r3,r1
 354:	58 62 00 00 	sw (r3+0),r2
}
 358:	c3 a0 00 00 	ret

0000035c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 35c:	78 03 00 00 	mvhi r3,0x0
 360:	3c 21 00 02 	sli r1,r1,2
 364:	38 63 06 1c 	ori r3,r3,0x61c
 368:	78 02 00 00 	mvhi r2,0x0
 36c:	b4 61 18 00 	add r3,r3,r1
 370:	38 42 02 38 	ori r2,r2,0x238
 374:	58 62 00 00 	sw (r3+0),r2
}
 378:	c3 a0 00 00 	ret

0000037c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*msec;
 37c:	78 02 00 00 	mvhi r2,0x0
 380:	38 42 06 0c 	ori r2,r2,0x60c
 384:	28 42 00 00 	lw r2,(r2+0)
 388:	08 21 00 64 	muli r1,r1,100
 38c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 390:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 394:	34 01 00 08 	mvi r1,8
 398:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 39c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3a0:	20 21 00 01 	andi r1,r1,0x1
 3a4:	44 20 ff fe 	be r1,r0,39c <msleep+0x20>
}
 3a8:	c3 a0 00 00 	ret

000003ac <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (30)*nsec;
 3ac:	78 02 00 00 	mvhi r2,0x0
 3b0:	38 42 06 0c 	ori r2,r2,0x60c
 3b4:	28 42 00 00 	lw r2,(r2+0)
 3b8:	3c 23 00 01 	sli r3,r1,1
 3bc:	3c 21 00 05 	sli r1,r1,5
 3c0:	c8 23 08 00 	sub r1,r1,r3
 3c4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3c8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3cc:	34 01 00 08 	mvi r1,8
 3d0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3d4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3d8:	20 21 00 01 	andi r1,r1,0x1
 3dc:	44 20 ff fe 	be r1,r0,3d4 <nsleep+0x28>
}
 3e0:	c3 a0 00 00 	ret

000003e4 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3e4:	78 01 00 00 	mvhi r1,0x0
 3e8:	38 21 06 0c 	ori r1,r1,0x60c
 3ec:	28 23 00 00 	lw r3,(r1+0)
 3f0:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3f4:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3f8:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3fc:	38 21 06 9c 	ori r1,r1,0x69c

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 400:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 404:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 408:	78 02 00 00 	mvhi r2,0x0
 40c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 410:	34 04 00 0e 	mvi r4,14
 414:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 418:	38 21 06 1c 	ori r1,r1,0x61c
 41c:	38 42 02 3c 	ori r2,r2,0x23c
 420:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 424:	c3 a0 00 00 	ret

00000428 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 428:	c3 a0 00 00 	ret

0000042c <uart_getchar>:

char uart_getchar()
{   
 42c:	78 01 00 00 	mvhi r1,0x0
 430:	38 21 06 08 	ori r1,r1,0x608
 434:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 438:	28 41 00 00 	lw r1,(r2+0)
 43c:	20 21 00 01 	andi r1,r1,0x1
 440:	44 20 ff fe 	be r1,r0,438 <uart_getchar+0xc>
	return uart0->rxtx;
 444:	28 41 00 04 	lw r1,(r2+4)
}
 448:	20 21 00 ff 	andi r1,r1,0xff
 44c:	c3 a0 00 00 	ret

00000450 <uart_putchar>:

void uart_putchar(char c)
{
 450:	78 02 00 00 	mvhi r2,0x0
 454:	38 42 06 08 	ori r2,r2,0x608
 458:	28 43 00 00 	lw r3,(r2+0)
 45c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 460:	28 62 00 00 	lw r2,(r3+0)
 464:	20 42 00 10 	andi r2,r2,0x10
 468:	5c 40 ff fe 	bne r2,r0,460 <uart_putchar+0x10>
	uart0->rxtx = c;
 46c:	58 61 00 04 	sw (r3+4),r1
}
 470:	c3 a0 00 00 	ret

00000474 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 474:	40 24 00 00 	lbu r4,(r1+0)
 478:	44 80 00 0b 	be r4,r0,4a4 <uart_putstr+0x30>
 47c:	78 02 00 00 	mvhi r2,0x0
 480:	38 42 06 08 	ori r2,r2,0x608
 484:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 488:	28 62 00 00 	lw r2,(r3+0)
 48c:	20 42 00 10 	andi r2,r2,0x10
 490:	5c 40 ff fe 	bne r2,r0,488 <uart_putstr+0x14>
	uart0->rxtx = c;
 494:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 498:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 49c:	40 24 00 00 	lbu r4,(r1+0)
 4a0:	5c 82 ff fa 	bne r4,r2,488 <uart_putstr+0x14>
 4a4:	c3 a0 00 00 	ret

000004a8 <uart1_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4a8:	c3 a0 00 00 	ret

000004ac <uart1_getchar>:

char uart1_getchar()
{   
 4ac:	78 01 00 00 	mvhi r1,0x0
 4b0:	38 21 06 10 	ori r1,r1,0x610
 4b4:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 4b8:	28 41 00 00 	lw r1,(r2+0)
 4bc:	20 21 00 01 	andi r1,r1,0x1
 4c0:	44 20 ff fe 	be r1,r0,4b8 <uart1_getchar+0xc>
	return uart1->rxtx;
 4c4:	28 41 00 04 	lw r1,(r2+4)
}
 4c8:	20 21 00 ff 	andi r1,r1,0xff
 4cc:	c3 a0 00 00 	ret

000004d0 <uart1_putchar>:

void uart1_putchar(char c)
{
 4d0:	78 02 00 00 	mvhi r2,0x0
 4d4:	38 42 06 10 	ori r2,r2,0x610
 4d8:	28 43 00 00 	lw r3,(r2+0)
 4dc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 4e0:	28 62 00 00 	lw r2,(r3+0)
 4e4:	20 42 00 10 	andi r2,r2,0x10
 4e8:	5c 40 ff fe 	bne r2,r0,4e0 <uart1_putchar+0x10>
	uart1->rxtx = c;
 4ec:	58 61 00 04 	sw (r3+4),r1
}
 4f0:	c3 a0 00 00 	ret

000004f4 <uart1_putstr>:

void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4f4:	40 24 00 00 	lbu r4,(r1+0)
 4f8:	44 80 00 0b 	be r4,r0,524 <uart1_putstr+0x30>
 4fc:	78 02 00 00 	mvhi r2,0x0
 500:	38 42 06 10 	ori r2,r2,0x610
 504:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart1_putchar(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 508:	28 62 00 00 	lw r2,(r3+0)
 50c:	20 42 00 10 	andi r2,r2,0x10
 510:	5c 40 ff fe 	bne r2,r0,508 <uart1_putstr+0x14>
	uart1->rxtx = c;
 514:	58 64 00 04 	sw (r3+4),r4
void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart1_putchar(*c);
		c++;
 518:	34 21 00 01 	addi r1,r1,1
}

void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
 51c:	40 24 00 00 	lbu r4,(r1+0)
 520:	5c 82 ff fa 	bne r4,r2,508 <uart1_putstr+0x14>
 524:	c3 a0 00 00 	ret

00000528 <uart2_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 528:	c3 a0 00 00 	ret

0000052c <uart2_getchar>:

char uart2_getchar()
{   
 52c:	78 01 00 00 	mvhi r1,0x0
 530:	38 21 06 18 	ori r1,r1,0x618
 534:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart2->ucr & UART_DR)) ;
 538:	28 41 00 00 	lw r1,(r2+0)
 53c:	20 21 00 01 	andi r1,r1,0x1
 540:	44 20 ff fe 	be r1,r0,538 <uart2_getchar+0xc>
	return uart2->rxtx;
 544:	28 41 00 04 	lw r1,(r2+4)
}
 548:	20 21 00 ff 	andi r1,r1,0xff
 54c:	c3 a0 00 00 	ret

00000550 <uart2_putchar>:

void uart2_putchar(char c)
{
 550:	78 02 00 00 	mvhi r2,0x0
 554:	38 42 06 18 	ori r2,r2,0x618
 558:	28 43 00 00 	lw r3,(r2+0)
 55c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart2->ucr & UART_BUSY) ;
 560:	28 62 00 00 	lw r2,(r3+0)
 564:	20 42 00 10 	andi r2,r2,0x10
 568:	5c 40 ff fe 	bne r2,r0,560 <uart2_putchar+0x10>
	uart2->rxtx = c;
 56c:	58 61 00 04 	sw (r3+4),r1
}
 570:	c3 a0 00 00 	ret

00000574 <uart2_putstr>:

void uart2_putstr(char *str)
{
	char *c = str;
	while(*c) {
 574:	40 24 00 00 	lbu r4,(r1+0)
 578:	44 80 00 0b 	be r4,r0,5a4 <uart2_putstr+0x30>
 57c:	78 02 00 00 	mvhi r2,0x0
 580:	38 42 06 18 	ori r2,r2,0x618
 584:	28 43 00 00 	lw r3,(r2+0)
	return uart2->rxtx;
}

void uart2_putchar(char c)
{
	while (uart2->ucr & UART_BUSY) ;
 588:	28 62 00 00 	lw r2,(r3+0)
 58c:	20 42 00 10 	andi r2,r2,0x10
 590:	5c 40 ff fe 	bne r2,r0,588 <uart2_putstr+0x14>
	uart2->rxtx = c;
 594:	58 64 00 04 	sw (r3+4),r4
void uart2_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart2_putchar(*c);
		c++;
 598:	34 21 00 01 	addi r1,r1,1
}

void uart2_putstr(char *str)
{
	char *c = str;
	while(*c) {
 59c:	40 24 00 00 	lbu r4,(r1+0)
 5a0:	5c 82 ff fa 	bne r4,r2,588 <uart2_putstr+0x14>
 5a4:	c3 a0 00 00 	ret

000005a8 <spi_init>:
 * SPI Functions
 */

void spi_init()
{
	spi0->divisor = (1000);
 5a8:	78 01 00 00 	mvhi r1,0x0
 5ac:	38 21 06 14 	ori r1,r1,0x614
 5b0:	28 21 00 00 	lw r1,(r1+0)
 5b4:	34 02 03 e8 	mvi r2,1000
 5b8:	58 22 00 0c 	sw (r1+12),r2
}
 5bc:	c3 a0 00 00 	ret

000005c0 <spi_putchar>:


void spi_putchar(char c)
{
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 06 14 	ori r2,r2,0x614
 5c8:	28 43 00 00 	lw r3,(r2+0)
 5cc:	20 21 00 ff 	andi r1,r1,0xff
	while (spi0->run & 1) ;
 5d0:	28 62 00 04 	lw r2,(r3+4)
 5d4:	20 42 00 01 	andi r2,r2,0x1
 5d8:	5c 40 ff fe 	bne r2,r0,5d0 <spi_putchar+0x10>
	spi0->rxtx = c;
 5dc:	58 61 00 00 	sw (r3+0),r1
}
 5e0:	c3 a0 00 00 	ret

000005e4 <spi_getchar>:

char spi_getchar()
{   
 5e4:	78 01 00 00 	mvhi r1,0x0
 5e8:	38 21 06 14 	ori r1,r1,0x614
 5ec:	28 22 00 00 	lw r2,(r1+0)
	while (spi0->run & 1) ;
 5f0:	28 41 00 04 	lw r1,(r2+4)
 5f4:	20 21 00 01 	andi r1,r1,0x1
 5f8:	5c 20 ff fe 	bne r1,r0,5f0 <spi_getchar+0xc>
	return spi0->rxtx;
 5fc:	28 41 00 00 	lw r1,(r2+0)
}
 600:	20 21 00 ff 	andi r1,r1,0xff
 604:	c3 a0 00 00 	ret
