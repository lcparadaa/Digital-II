
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000578  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000578  00000578  000005cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  0000057c  0000057c  000005d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000598  00000598  000005ec  2**2
                  ALLOC
  4 .debug_abbrev 000002c5  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f5  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042f  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000015f  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001ac  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000079  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000219  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001b15  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00001b26  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 8b 	calli 2f8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 a0 	ori gp,gp,0x5a0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 98 	ori r1,r1,0x598
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 24 	ori r3,r3,0x624

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 4b 	calli 268 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <writeint>:
 */

#include "soc-hw.h"

inline void writeint(uint32_t val)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	34 0b 00 08 	mvi r11,8
 220:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 224:	34 0d 00 09 	mvi r13,9
 228:	e0 00 00 02 	bi 230 <writeint+0x28>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
 22c:	3d 8c 00 04 	sli r12,r12,4
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 230:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
 234:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 238:	51 a2 00 0a 	bgeu r13,r2,260 <writeint+0x58>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 23c:	35 6b ff ff 	addi r11,r11,-1
 240:	f8 00 00 94 	calli 490 <uart_putchar>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 244:	5d 60 ff fa 	bne r11,r0,22c <writeint+0x24>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
	}
}
 248:	2b 9d 00 04 	lw ra,(sp+4)
 24c:	2b 8b 00 10 	lw r11,(sp+16)
 250:	2b 8c 00 0c 	lw r12,(sp+12)
 254:	2b 8d 00 08 	lw r13,(sp+8)
 258:	37 9c 00 10 	addi sp,sp,16
 25c:	c3 a0 00 00 	ret
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 260:	34 41 00 30 	addi r1,r2,48
 264:	e3 ff ff f6 	bi 23c <writeint+0x34>

00000268 <main>:
volatile uint8_t *p2;

extern uint32_t tic_msec;

int main()
{
 268:	37 9c ff fc 	addi sp,sp,-4
 26c:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t aa,bb; 
for(;;)
	 uart_putchar('1');
 270:	34 01 00 31 	mvi r1,49
 274:	f8 00 00 87 	calli 490 <uart_putchar>
 278:	e3 ff ff fe 	bi 270 <main+0x8>

0000027c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 27c:	c3 a0 00 00 	ret

00000280 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 280:	78 01 00 00 	mvhi r1,0x0
 284:	38 21 06 20 	ori r1,r1,0x620
 288:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 28c:	78 02 00 00 	mvhi r2,0x0
 290:	38 42 05 94 	ori r2,r2,0x594
 294:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 298:	34 63 00 01 	addi r3,r3,1
 29c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2a0:	34 01 00 0e 	mvi r1,14
 2a4:	58 41 00 00 	sw (r2+0),r1
}
 2a8:	c3 a0 00 00 	ret

000002ac <prueba>:
timer_t *timer0 = (timer_t *)  0x30000000;
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2ac:	78 02 00 00 	mvhi r2,0x0
 2b0:	38 42 05 84 	ori r2,r2,0x584
	   spi0->rxtx=1;
 2b4:	78 01 00 00 	mvhi r1,0x0
timer_t *timer0 = (timer_t *)  0x30000000;
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2b8:	28 42 00 00 	lw r2,(r2+0)
	   spi0->rxtx=1;
 2bc:	38 21 05 8c 	ori r1,r1,0x58c
 2c0:	28 21 00 00 	lw r1,(r1+0)
timer_t *timer0 = (timer_t *)  0x30000000;
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2c4:	34 03 00 1e 	mvi r3,30
 2c8:	58 43 00 04 	sw (r2+4),r3
	   spi0->rxtx=1;
 2cc:	34 02 00 01 	mvi r2,1
 2d0:	58 22 00 00 	sw (r1+0),r2
	   spi0->nop1=2;
 2d4:	34 02 00 02 	mvi r2,2
 2d8:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 2dc:	34 02 00 03 	mvi r2,3
 2e0:	58 22 00 08 	sw (r1+8),r2
	   spi0->nop2=5;
 2e4:	34 02 00 05 	mvi r2,5
 2e8:	58 22 00 0c 	sw (r1+12),r2
	   spi0->divisor=4;
 2ec:	34 02 00 04 	mvi r2,4
 2f0:	58 22 00 10 	sw (r1+16),r2
	   

}
 2f4:	c3 a0 00 00 	ret

000002f8 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2f8:	37 9c ff f0 	addi sp,sp,-16
 2fc:	5b 8b 00 10 	sw (sp+16),r11
 300:	5b 8c 00 0c 	sw (sp+12),r12
 304:	5b 8d 00 08 	sw (sp+8),r13
 308:	5b 9d 00 04 	sw (sp+4),ra
 30c:	78 0b 00 00 	mvhi r11,0x0
 310:	39 6b 05 a0 	ori r11,r11,0x5a0
 314:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 318:	35 6d 00 80 	addi r13,r11,128
 31c:	e0 00 00 04 	bi 32c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 320:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 324:	45 6d 00 08 	be r11,r13,344 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 328:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 32c:	21 81 00 01 	andi r1,r12,0x1
 330:	44 20 ff fc 	be r1,r0,320 <irq_handler+0x28>
 334:	29 61 00 00 	lw r1,(r11+0)
 338:	35 6b 00 04 	addi r11,r11,4
 33c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 340:	5d 6d ff fa 	bne r11,r13,328 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 344:	2b 9d 00 04 	lw ra,(sp+4)
 348:	2b 8b 00 10 	lw r11,(sp+16)
 34c:	2b 8c 00 0c 	lw r12,(sp+12)
 350:	2b 8d 00 08 	lw r13,(sp+8)
 354:	37 9c 00 10 	addi sp,sp,16
 358:	c3 a0 00 00 	ret

0000035c <isr_init>:

void isr_init()
{
 35c:	78 01 00 00 	mvhi r1,0x0
 360:	78 02 00 00 	mvhi r2,0x0
 364:	38 21 05 a0 	ori r1,r1,0x5a0
 368:	38 42 02 7c 	ori r2,r2,0x27c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 36c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 370:	58 22 00 00 	sw (r1+0),r2
 374:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 378:	5c 23 ff fe 	bne r1,r3,370 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 37c:	c3 a0 00 00 	ret

00000380 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 380:	78 03 00 00 	mvhi r3,0x0
 384:	3c 21 00 02 	sli r1,r1,2
 388:	38 63 05 a0 	ori r3,r3,0x5a0
 38c:	b4 61 18 00 	add r3,r3,r1
 390:	58 62 00 00 	sw (r3+0),r2
}
 394:	c3 a0 00 00 	ret

00000398 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 398:	78 03 00 00 	mvhi r3,0x0
 39c:	3c 21 00 02 	sli r1,r1,2
 3a0:	38 63 05 a0 	ori r3,r3,0x5a0
 3a4:	78 02 00 00 	mvhi r2,0x0
 3a8:	b4 61 18 00 	add r3,r3,r1
 3ac:	38 42 02 7c 	ori r2,r2,0x27c
 3b0:	58 62 00 00 	sw (r3+0),r2
}
 3b4:	c3 a0 00 00 	ret

000003b8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3b8:	78 04 00 00 	mvhi r4,0x0
 3bc:	38 84 05 78 	ori r4,r4,0x578
 3c0:	28 83 00 00 	lw r3,(r4+0)
 3c4:	78 02 00 00 	mvhi r2,0x0
 3c8:	38 42 05 94 	ori r2,r2,0x594
 3cc:	28 42 00 00 	lw r2,(r2+0)
 3d0:	88 23 08 00 	mul r1,r1,r3
 3d4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3d8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3dc:	34 01 00 08 	mvi r1,8
 3e0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3e4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3e8:	20 21 00 01 	andi r1,r1,0x1
 3ec:	44 20 ff fe 	be r1,r0,3e4 <msleep+0x2c>
}
 3f0:	c3 a0 00 00 	ret

000003f4 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3f4:	78 02 00 00 	mvhi r2,0x0
 3f8:	38 42 05 94 	ori r2,r2,0x594
 3fc:	28 42 00 00 	lw r2,(r2+0)
 400:	08 21 00 64 	muli r1,r1,100
 404:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 408:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 40c:	34 01 00 08 	mvi r1,8
 410:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 414:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 418:	20 21 00 01 	andi r1,r1,0x1
 41c:	44 20 ff fe 	be r1,r0,414 <nsleep+0x20>
}
 420:	c3 a0 00 00 	ret

00000424 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 424:	78 01 00 00 	mvhi r1,0x0
 428:	38 21 05 94 	ori r1,r1,0x594
 42c:	28 23 00 00 	lw r3,(r1+0)
 430:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 434:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 438:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 43c:	38 21 06 20 	ori r1,r1,0x620

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 440:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 444:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 448:	78 02 00 00 	mvhi r2,0x0
 44c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 450:	34 04 00 0e 	mvi r4,14
 454:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 458:	38 21 05 a0 	ori r1,r1,0x5a0
 45c:	38 42 02 80 	ori r2,r2,0x280
 460:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 464:	c3 a0 00 00 	ret

00000468 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 468:	c3 a0 00 00 	ret

0000046c <uart_getchar>:

char uart_getchar()
{   
 46c:	78 01 00 00 	mvhi r1,0x0
 470:	38 21 05 84 	ori r1,r1,0x584
 474:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 478:	28 41 00 00 	lw r1,(r2+0)
 47c:	20 21 00 01 	andi r1,r1,0x1
 480:	44 20 ff fe 	be r1,r0,478 <uart_getchar+0xc>
	return uart0->rxtx;
 484:	28 41 00 04 	lw r1,(r2+4)
}
 488:	20 21 00 ff 	andi r1,r1,0xff
 48c:	c3 a0 00 00 	ret

00000490 <uart_putchar>:

void uart_putchar(char c)
{
 490:	78 02 00 00 	mvhi r2,0x0
 494:	38 42 05 84 	ori r2,r2,0x584
 498:	28 43 00 00 	lw r3,(r2+0)
 49c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4a0:	28 62 00 00 	lw r2,(r3+0)
 4a4:	20 42 00 10 	andi r2,r2,0x10
 4a8:	5c 40 ff fe 	bne r2,r0,4a0 <uart_putchar+0x10>
	uart0->rxtx = c;
 4ac:	58 61 00 04 	sw (r3+4),r1
}
 4b0:	c3 a0 00 00 	ret

000004b4 <uart_getchar1>:
char uart_getchar1()
{   
 4b4:	78 01 00 00 	mvhi r1,0x0
 4b8:	38 21 05 88 	ori r1,r1,0x588
 4bc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 4c0:	28 41 00 00 	lw r1,(r2+0)
 4c4:	20 21 00 01 	andi r1,r1,0x1
 4c8:	44 20 ff fe 	be r1,r0,4c0 <uart_getchar1+0xc>
	return uart1->rxtx;
 4cc:	28 41 00 04 	lw r1,(r2+4)
}
 4d0:	20 21 00 ff 	andi r1,r1,0xff
 4d4:	c3 a0 00 00 	ret

000004d8 <uart_putchar1>:

void uart_putchar1(char c)
{
 4d8:	78 02 00 00 	mvhi r2,0x0
 4dc:	38 42 05 88 	ori r2,r2,0x588
 4e0:	28 43 00 00 	lw r3,(r2+0)
 4e4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 4e8:	28 62 00 00 	lw r2,(r3+0)
 4ec:	20 42 00 10 	andi r2,r2,0x10
 4f0:	5c 40 ff fe 	bne r2,r0,4e8 <uart_putchar1+0x10>
	uart1->rxtx = c;
 4f4:	58 61 00 04 	sw (r3+4),r1
}
 4f8:	c3 a0 00 00 	ret

000004fc <uart_getchar2>:
char uart_getchar2()
{   
 4fc:	78 01 00 00 	mvhi r1,0x0
 500:	38 21 05 90 	ori r1,r1,0x590
 504:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart2->ucr & UART_DR)) ;
 508:	28 41 00 00 	lw r1,(r2+0)
 50c:	20 21 00 01 	andi r1,r1,0x1
 510:	44 20 ff fe 	be r1,r0,508 <uart_getchar2+0xc>
	return uart2->rxtx;
 514:	28 41 00 04 	lw r1,(r2+4)
}
 518:	20 21 00 ff 	andi r1,r1,0xff
 51c:	c3 a0 00 00 	ret

00000520 <uart_putcha2>:

void uart_putcha2(char c)
{
 520:	78 02 00 00 	mvhi r2,0x0
 524:	38 42 05 90 	ori r2,r2,0x590
 528:	28 43 00 00 	lw r3,(r2+0)
 52c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart2->ucr & UART_BUSY) ;
 530:	28 62 00 00 	lw r2,(r3+0)
 534:	20 42 00 10 	andi r2,r2,0x10
 538:	5c 40 ff fe 	bne r2,r0,530 <uart_putcha2+0x10>
	uart2->rxtx = c;
 53c:	58 61 00 04 	sw (r3+4),r1
}
 540:	c3 a0 00 00 	ret

00000544 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 544:	40 24 00 00 	lbu r4,(r1+0)
 548:	44 80 00 0b 	be r4,r0,574 <uart_putstr+0x30>
 54c:	78 02 00 00 	mvhi r2,0x0
 550:	38 42 05 84 	ori r2,r2,0x584
 554:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 558:	28 62 00 00 	lw r2,(r3+0)
 55c:	20 42 00 10 	andi r2,r2,0x10
 560:	5c 40 ff fe 	bne r2,r0,558 <uart_putstr+0x14>
	uart0->rxtx = c;
 564:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 568:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 56c:	40 24 00 00 	lbu r4,(r1+0)
 570:	5c 82 ff fa 	bne r4,r2,558 <uart_putstr+0x14>
 574:	c3 a0 00 00 	ret
